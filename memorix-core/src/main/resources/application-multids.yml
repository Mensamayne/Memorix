# Multi-DataSource configuration example
# 
# To enable multi-datasource support:
# 1. Set spring.profiles.active=multids
# 2. Configure multiple PostgreSQL databases
# 3. Each plugin can use different database

server:
  port: 8080

spring:
  application:
    name: memorix
  
  # Flyway configuration for default datasource
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    
  # Import secrets from external file
  config:
    import: optional:file:./secrets.yml

# Multi-datasource configuration
memorix:
  # Enable multi-datasource routing
  multi-datasource:
    enabled: true
  
  # Define multiple datasources
  datasources:
    # Default datasource - used by most plugins
    default:
      url: jdbc:postgresql://localhost:5432/memorix
      username: postgres
      password: postgres
      hikari:
        maximum-pool-size: 10
        minimum-idle: 2
        connection-timeout: 30000
        idle-timeout: 600000
        max-lifetime: 1800000
    
    # Documentation datasource - separate database for docs
    documentation:
      url: jdbc:postgresql://localhost:5432/memorix_docs
      username: postgres
      password: postgres
      hikari:
        maximum-pool-size: 5   # Smaller pool for docs
        minimum-idle: 1
        connection-timeout: 30000
    
    # Example: Recipes datasource
    recipes:
      url: jdbc:postgresql://localhost:5432/memorix_recipes
      username: postgres
      password: postgres
      hikari:
        maximum-pool-size: 20  # Larger pool for high-traffic
        minimum-idle: 5
  
  # Embedding configuration
  embedding:
    provider: openai
    openai:
      model: text-embedding-3-small
      base-url: https://api.openai.com/v1
      timeout: 30000
      max-retries: 3

logging:
  level:
    io.memorix: DEBUG
    io.memorix.config: INFO
    io.memorix.storage: DEBUG
    com.zaxxer.hikari: INFO

---
# Notes:
#
# Database setup required:
#   CREATE DATABASE memorix;
#   CREATE DATABASE memorix_docs;
#   CREATE DATABASE memorix_recipes;
#
# Each database needs pgvector extension:
#   CREATE EXTENSION IF NOT EXISTS vector;
#
# Flyway migrations will run automatically for 'default' datasource.
# For other datasources, you need to run migrations manually or configure
# separate Flyway instances.

